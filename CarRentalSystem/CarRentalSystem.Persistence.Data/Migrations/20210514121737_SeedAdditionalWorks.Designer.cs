// <auto-generated />
using System;
using CarRentalSystem.Persistence.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CarRentalSystem.Persistence.Data.Migrations
{
    [DbContext(typeof(CarRentalSystemContext))]
    [Migration("20210514121737_SeedAdditionalWorks")]
    partial class SeedAdditionalWorks
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CarRentalSystem.Domain.Entities.Main.AdditionalWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AdditionalWorks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cost = 100,
                            Name = "Child seat"
                        },
                        new
                        {
                            Id = 2,
                            Cost = 500,
                            Name = "Dry cleaning"
                        },
                        new
                        {
                            Id = 3,
                            Cost = 250,
                            Name = "Full tank"
                        });
                });

            modelBuilder.Entity("CarRentalSystem.Domain.Entities.Main.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AverageFuelConsumption")
                        .HasColumnType("int");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CostPerHour")
                        .HasColumnType("int");

                    b.Property<int?>("CurrentOrderId")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfSeats")
                        .HasColumnType("int");

                    b.Property<int>("PointOfRentalId")
                        .HasColumnType("int");

                    b.Property<string>("TransmissionType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CurrentOrderId")
                        .IsUnique()
                        .HasFilter("[CurrentOrderId] IS NOT NULL");

                    b.HasIndex("PointOfRentalId");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AverageFuelConsumption = 10,
                            Brand = "Audi",
                            CostPerHour = 100,
                            NumberOfSeats = 4,
                            PointOfRentalId = 1,
                            TransmissionType = "Mechanic"
                        },
                        new
                        {
                            Id = 2,
                            AverageFuelConsumption = 20,
                            Brand = "Audi",
                            CostPerHour = 200,
                            NumberOfSeats = 2,
                            PointOfRentalId = 1,
                            TransmissionType = "Mechanic"
                        },
                        new
                        {
                            Id = 3,
                            AverageFuelConsumption = 30,
                            Brand = "Audi",
                            CostPerHour = 300,
                            NumberOfSeats = 6,
                            PointOfRentalId = 1,
                            TransmissionType = "Automatic"
                        },
                        new
                        {
                            Id = 4,
                            AverageFuelConsumption = 15,
                            Brand = "Toyota",
                            CostPerHour = 150,
                            NumberOfSeats = 4,
                            PointOfRentalId = 1,
                            TransmissionType = "Mechanic"
                        },
                        new
                        {
                            Id = 5,
                            AverageFuelConsumption = 25,
                            Brand = "Toyota",
                            CostPerHour = 250,
                            NumberOfSeats = 2,
                            PointOfRentalId = 1,
                            TransmissionType = "Automatic"
                        },
                        new
                        {
                            Id = 6,
                            AverageFuelConsumption = 50,
                            Brand = "Toyota",
                            CostPerHour = 500,
                            NumberOfSeats = 10,
                            PointOfRentalId = 2,
                            TransmissionType = "Mechanic"
                        },
                        new
                        {
                            Id = 7,
                            AverageFuelConsumption = 50,
                            Brand = "Mitsubishi",
                            CostPerHour = 500,
                            NumberOfSeats = 10,
                            PointOfRentalId = 2,
                            TransmissionType = "Mechanic"
                        },
                        new
                        {
                            Id = 8,
                            AverageFuelConsumption = 35,
                            Brand = "Mitsubishi",
                            CostPerHour = 400,
                            NumberOfSeats = 1,
                            PointOfRentalId = 2,
                            TransmissionType = "Mechanic"
                        },
                        new
                        {
                            Id = 9,
                            AverageFuelConsumption = 60,
                            Brand = "Mitsubishi",
                            CostPerHour = 1000,
                            NumberOfSeats = 4,
                            PointOfRentalId = 2,
                            TransmissionType = "Automatic"
                        },
                        new
                        {
                            Id = 10,
                            AverageFuelConsumption = 10,
                            Brand = "Nissan",
                            CostPerHour = 100,
                            NumberOfSeats = 4,
                            PointOfRentalId = 3,
                            TransmissionType = "Mechanic"
                        },
                        new
                        {
                            Id = 11,
                            AverageFuelConsumption = 100,
                            Brand = "Nissan",
                            CostPerHour = 900,
                            NumberOfSeats = 3,
                            PointOfRentalId = 3,
                            TransmissionType = "Mechanic"
                        },
                        new
                        {
                            Id = 12,
                            AverageFuelConsumption = 10,
                            Brand = "Nissan",
                            CostPerHour = 100,
                            NumberOfSeats = 4,
                            PointOfRentalId = 3,
                            TransmissionType = "Mechanic"
                        },
                        new
                        {
                            Id = 13,
                            AverageFuelConsumption = 90,
                            Brand = "BMV",
                            CostPerHour = 150,
                            NumberOfSeats = 5,
                            PointOfRentalId = 4,
                            TransmissionType = "Automatic"
                        },
                        new
                        {
                            Id = 14,
                            AverageFuelConsumption = 15,
                            Brand = "BMV",
                            CostPerHour = 400,
                            NumberOfSeats = 2,
                            PointOfRentalId = 4,
                            TransmissionType = "Automatic"
                        },
                        new
                        {
                            Id = 15,
                            AverageFuelConsumption = 80,
                            Brand = "BMV",
                            CostPerHour = 150,
                            NumberOfSeats = 4,
                            PointOfRentalId = 5,
                            TransmissionType = "Automatic"
                        },
                        new
                        {
                            Id = 16,
                            AverageFuelConsumption = 100,
                            Brand = "Mercedes",
                            CostPerHour = 160,
                            NumberOfSeats = 1,
                            PointOfRentalId = 6,
                            TransmissionType = "Mechanic"
                        },
                        new
                        {
                            Id = 17,
                            AverageFuelConsumption = 90,
                            Brand = "Mercedes",
                            CostPerHour = 150,
                            NumberOfSeats = 5,
                            PointOfRentalId = 6,
                            TransmissionType = "Automatic"
                        },
                        new
                        {
                            Id = 18,
                            AverageFuelConsumption = 75,
                            Brand = "Volvo",
                            CostPerHour = 300,
                            NumberOfSeats = 4,
                            PointOfRentalId = 6,
                            TransmissionType = "Mechanic"
                        },
                        new
                        {
                            Id = 19,
                            AverageFuelConsumption = 60,
                            Brand = "Volvo",
                            CostPerHour = 300,
                            NumberOfSeats = 3,
                            PointOfRentalId = 6,
                            TransmissionType = "Mechanic"
                        },
                        new
                        {
                            Id = 20,
                            AverageFuelConsumption = 200,
                            Brand = "Volvo",
                            CostPerHour = 500,
                            NumberOfSeats = 2,
                            PointOfRentalId = 6,
                            TransmissionType = "Automatic"
                        });
                });

            modelBuilder.Entity("CarRentalSystem.Domain.Entities.Main.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CarId")
                        .HasColumnType("int");

                    b.Property<int?>("CurrentCustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalCost")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrentCustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CarRentalSystem.Domain.Entities.Main.PointOfRental", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PointOfRentals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Default address street one",
                            City = "Minsk",
                            Country = "Belarus",
                            Name = "CFL"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Default address street two",
                            City = "Hrodna",
                            Country = "Belarus",
                            Name = "CFL"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Default address street three",
                            City = "Moscow",
                            Country = "Russia",
                            Name = "SpaceStation"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Default address street four",
                            City = "Montreal",
                            Country = "Canada",
                            Name = "Independence"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Default address street five",
                            City = "Toronto",
                            Country = "Canada",
                            Name = "NoTime"
                        },
                        new
                        {
                            Id = 6,
                            Address = "Default address street six",
                            City = "Toronto",
                            Country = "Canada",
                            Name = "Expensive"
                        });
                });

            modelBuilder.Entity("CarRentalSystem.Domain.Entities.Main.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("RefreshTokenId")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RefreshTokenId")
                        .IsUnique()
                        .HasFilter("[RefreshTokenId] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Login = "adminOwner",
                            Name = "Admin",
                            PasswordHash = new byte[] { 152, 193, 111, 22, 246, 77, 217, 128, 8, 72, 235, 11, 52, 127, 186, 49, 237, 95, 197, 128, 180, 195, 7, 34, 255, 128, 61, 21, 167, 141, 207, 69, 107, 2, 168, 220, 243, 175, 82, 92, 193, 71, 169, 149, 154, 244, 191, 115, 180, 51, 131, 20, 64, 77, 147, 252, 153, 197, 71, 108, 1, 46, 139, 219 },
                            PasswordSalt = new byte[] { 232, 20, 94, 29, 2, 201, 135, 82, 232, 170, 124, 239, 59, 233, 119, 75, 219, 31, 54, 112, 97, 103, 147, 31, 30, 116, 228, 36, 135, 218, 166, 147, 101, 19, 166, 46, 155, 178, 88, 2, 118, 129, 180, 166, 35, 231, 191, 162, 81, 6, 112, 108, 124, 233, 226, 222, 106, 22, 242, 241, 42, 250, 160, 67, 56, 36, 49, 177, 212, 122, 192, 226, 229, 239, 187, 21, 211, 73, 102, 166, 252, 239, 204, 196, 228, 248, 211, 40, 110, 30, 40, 12, 3, 2, 90, 45, 105, 203, 44, 165, 23, 193, 75, 95, 47, 229, 9, 154, 92, 139, 99, 220, 201, 151, 105, 101, 221, 134, 247, 235, 134, 228, 68, 187, 141, 95, 21, 154 },
                            Role = "AdministratorOwner",
                            SurName = "Owner"
                        });
                });

            modelBuilder.Entity("CarRentalSystem.Domain.Entities.Support.OrderAdditionalWork", b =>
                {
                    b.Property<int>("AdditionalServiceId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("AdditionalServiceId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderAdditionalWorks");
                });

            modelBuilder.Entity("CarRentalSystem.Domain.Entities.Support.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("CarRentalSystem.Domain.Entities.Main.Car", b =>
                {
                    b.HasOne("CarRentalSystem.Domain.Entities.Main.Order", "CurrentOrder")
                        .WithOne("Car")
                        .HasForeignKey("CarRentalSystem.Domain.Entities.Main.Car", "CurrentOrderId");

                    b.HasOne("CarRentalSystem.Domain.Entities.Main.PointOfRental", "PointOfRental")
                        .WithMany("Cars")
                        .HasForeignKey("PointOfRentalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentOrder");

                    b.Navigation("PointOfRental");
                });

            modelBuilder.Entity("CarRentalSystem.Domain.Entities.Main.Order", b =>
                {
                    b.HasOne("CarRentalSystem.Domain.Entities.Main.User", "CurrentCustomer")
                        .WithMany("Orders")
                        .HasForeignKey("CurrentCustomerId");

                    b.Navigation("CurrentCustomer");
                });

            modelBuilder.Entity("CarRentalSystem.Domain.Entities.Main.User", b =>
                {
                    b.HasOne("CarRentalSystem.Domain.Entities.Support.RefreshToken", "RefreshToken")
                        .WithOne("User")
                        .HasForeignKey("CarRentalSystem.Domain.Entities.Main.User", "RefreshTokenId");

                    b.Navigation("RefreshToken");
                });

            modelBuilder.Entity("CarRentalSystem.Domain.Entities.Support.OrderAdditionalWork", b =>
                {
                    b.HasOne("CarRentalSystem.Domain.Entities.Main.AdditionalWork", "AdditionalService")
                        .WithMany("OrderAdditionalWorks")
                        .HasForeignKey("AdditionalServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRentalSystem.Domain.Entities.Main.Order", "Order")
                        .WithMany("OrderAdditionalWorks")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdditionalService");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CarRentalSystem.Domain.Entities.Main.AdditionalWork", b =>
                {
                    b.Navigation("OrderAdditionalWorks");
                });

            modelBuilder.Entity("CarRentalSystem.Domain.Entities.Main.Order", b =>
                {
                    b.Navigation("Car");

                    b.Navigation("OrderAdditionalWorks");
                });

            modelBuilder.Entity("CarRentalSystem.Domain.Entities.Main.PointOfRental", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarRentalSystem.Domain.Entities.Main.User", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("CarRentalSystem.Domain.Entities.Support.RefreshToken", b =>
                {
                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
