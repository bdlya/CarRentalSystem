// <auto-generated />
using System;
using CarRentalSystem.Persistence.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CarRentalSystem.Persistence.Data.Migrations
{
    [DbContext(typeof(CarRentalSystemContext))]
    [Migration("20210505121510_ChangeSeed")]
    partial class ChangeSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CarRentalSystem.Domain.Entities.Main.AdditionalWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AdditionalWorks");
                });

            modelBuilder.Entity("CarRentalSystem.Domain.Entities.Main.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AverageFuelConsumption")
                        .HasColumnType("int");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CostPerHour")
                        .HasColumnType("int");

                    b.Property<int?>("CurrentOrderId")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfSeats")
                        .HasColumnType("int");

                    b.Property<int>("PointOfRentalId")
                        .HasColumnType("int");

                    b.Property<string>("TransmissionType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CurrentOrderId")
                        .IsUnique()
                        .HasFilter("[CurrentOrderId] IS NOT NULL");

                    b.HasIndex("PointOfRentalId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("CarRentalSystem.Domain.Entities.Main.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CarId")
                        .HasColumnType("int");

                    b.Property<int?>("CurrentCustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalCost")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrentCustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CarRentalSystem.Domain.Entities.Main.PointOfRental", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PointOfRentals");
                });

            modelBuilder.Entity("CarRentalSystem.Domain.Entities.Main.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("RefreshTokenId")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RefreshTokenId")
                        .IsUnique()
                        .HasFilter("[RefreshTokenId] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Login = "adminOwner",
                            Name = "Admin",
                            PasswordHash = new byte[] { 57, 248, 185, 111, 1, 210, 152, 205, 33, 171, 178, 246, 124, 93, 251, 152, 168, 127, 112, 72, 153, 215, 129, 164, 80, 148, 67, 173, 124, 216, 12, 78, 239, 135, 152, 88, 77, 46, 56, 79, 243, 54, 28, 108, 65, 242, 219, 57, 118, 226, 235, 241, 221, 19, 220, 3, 182, 235, 231, 9, 66, 71, 45, 252 },
                            PasswordSalt = new byte[] { 224, 243, 181, 156, 72, 17, 140, 254, 4, 170, 226, 128, 83, 209, 204, 114, 252, 96, 119, 59, 12, 83, 170, 126, 22, 220, 12, 35, 55, 60, 205, 149, 233, 111, 63, 180, 70, 178, 99, 238, 251, 38, 232, 128, 85, 60, 248, 31, 188, 9, 29, 20, 45, 211, 184, 37, 186, 159, 28, 139, 27, 78, 22, 205, 203, 41, 218, 138, 38, 110, 213, 187, 17, 24, 114, 224, 7, 220, 35, 13, 181, 87, 252, 104, 148, 65, 169, 106, 153, 122, 80, 129, 210, 204, 0, 16, 197, 79, 80, 253, 229, 117, 51, 44, 141, 146, 224, 230, 65, 37, 9, 137, 61, 131, 3, 242, 37, 171, 168, 194, 178, 59, 53, 63, 201, 75, 213, 240 },
                            Role = "AdministratorOwner",
                            SurName = "Owner"
                        });
                });

            modelBuilder.Entity("CarRentalSystem.Domain.Entities.Support.OrderAdditionalWork", b =>
                {
                    b.Property<int>("AdditionalServiceId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("AdditionalServiceId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderAdditionalWorks");
                });

            modelBuilder.Entity("CarRentalSystem.Domain.Entities.Support.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("CarRentalSystem.Domain.Entities.Main.Car", b =>
                {
                    b.HasOne("CarRentalSystem.Domain.Entities.Main.Order", "CurrentOrder")
                        .WithOne("Car")
                        .HasForeignKey("CarRentalSystem.Domain.Entities.Main.Car", "CurrentOrderId");

                    b.HasOne("CarRentalSystem.Domain.Entities.Main.PointOfRental", "PointOfRental")
                        .WithMany("Cars")
                        .HasForeignKey("PointOfRentalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentOrder");

                    b.Navigation("PointOfRental");
                });

            modelBuilder.Entity("CarRentalSystem.Domain.Entities.Main.Order", b =>
                {
                    b.HasOne("CarRentalSystem.Domain.Entities.Main.User", "CurrentCustomer")
                        .WithMany("Orders")
                        .HasForeignKey("CurrentCustomerId");

                    b.Navigation("CurrentCustomer");
                });

            modelBuilder.Entity("CarRentalSystem.Domain.Entities.Main.User", b =>
                {
                    b.HasOne("CarRentalSystem.Domain.Entities.Support.RefreshToken", "RefreshToken")
                        .WithOne("User")
                        .HasForeignKey("CarRentalSystem.Domain.Entities.Main.User", "RefreshTokenId");

                    b.Navigation("RefreshToken");
                });

            modelBuilder.Entity("CarRentalSystem.Domain.Entities.Support.OrderAdditionalWork", b =>
                {
                    b.HasOne("CarRentalSystem.Domain.Entities.Main.AdditionalWork", "AdditionalService")
                        .WithMany("OrderAdditionalWorks")
                        .HasForeignKey("AdditionalServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRentalSystem.Domain.Entities.Main.Order", "Order")
                        .WithMany("OrderAdditionalWorks")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdditionalService");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CarRentalSystem.Domain.Entities.Main.AdditionalWork", b =>
                {
                    b.Navigation("OrderAdditionalWorks");
                });

            modelBuilder.Entity("CarRentalSystem.Domain.Entities.Main.Order", b =>
                {
                    b.Navigation("Car");

                    b.Navigation("OrderAdditionalWorks");
                });

            modelBuilder.Entity("CarRentalSystem.Domain.Entities.Main.PointOfRental", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarRentalSystem.Domain.Entities.Main.User", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("CarRentalSystem.Domain.Entities.Support.RefreshToken", b =>
                {
                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
